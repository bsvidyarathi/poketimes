{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","components/Contact.js","hoc/Rainbow.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","props","className","to","exact","Home","state","posts","axios","get","then","res","setState","data","slice","this","postList","length","map","post","key","id","src","Pokeball","alt","title","body","Component","About","Rainbow","WrappedComponent","Math","floor","random","Post","match","params","post_id","App","path","component","Contact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,sC,2JCuB5BC,eApBA,SAACC,GAMd,OACE,yBAAKC,UAAU,4BACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,aAAaC,GAAG,KAAhC,eACA,wBAAID,UAAU,SACZ,4BAAI,kBAAC,IAAD,CAASE,OAAK,EAACD,GAAG,KAAlB,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,UACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,YAAZ,kB,kECiCCE,EA7Cf,4MAEIC,MAAQ,CACJC,MAAO,IAHf,kEAKyB,IAAD,OAChBC,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GAEF,EAAKC,SAAS,CACVL,MAAQI,EAAIE,KAAKC,MAAM,EAAG,WAV1C,+BAcc,IACEP,EAAUQ,KAAKT,MAAfC,MACFS,EAAWT,EAAMU,OACnBV,EAAMW,KAAI,SAAAC,GACR,OACE,yBAAKjB,UAAU,aAAakB,IAAKD,EAAKE,IACpC,yBAAKC,IAAKC,IAAUC,IAAI,eACxB,yBAAKtB,UAAU,gBACf,kBAAC,IAAD,CAAMC,GAAI,IAAMgB,EAAKE,IACnB,0BAAMnB,UAAU,uBAAuBiB,EAAKM,QAE5C,2BAAIN,EAAKO,WAMjB,yBAAKxB,UAAU,UAAf,oBAGI,OACV,6BACE,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,UAAd,QACCc,QAtCX,GAA0BW,aCSXC,EAXD,WACZ,OACE,6BACE,yBAAK1B,UAAU,aACb,wBAAIA,UAAU,UAAd,SACA,2QCOO2B,ECZC,SAACC,GAEf,IAEM5B,EAFU,CAAC,MAAO,OAAQ,SAAU,OAAQ,QAAS,UAC9B6B,KAAKC,MAAsB,EAAhBD,KAAKE,WACZ,QAEjC,OAAO,SAAChC,GAAD,OACL,yBAAKC,UAAWA,GACd,kBAAC4B,EAAqB7B,KDIb4B,EAXC,SAAC5B,GACf,OACE,6BACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,UAAd,WACA,6QE4BOgC,E,4MAhCb5B,MAAQ,CACNa,KAAM,I,kEAEY,IAAD,OACbE,EAAKN,KAAKd,MAAMkC,MAAMC,OAAOC,QACjC7B,IAAMC,IAAI,8CAAgDY,GACvDX,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZO,KAAMR,EAAIE,Y,+BAOhB,IAAMM,EAAOJ,KAAKT,MAAMa,KACtB,yBAAKjB,UAAU,QACb,wBAAIA,UAAU,UAAUa,KAAKT,MAAMa,KAAKM,OACxC,2BAAIV,KAAKT,MAAMa,KAAKO,OAGtB,yBAAKxB,UAAU,UAAf,mBAGF,OACE,yBAAKA,UAAU,aACZiB,O,GA3BUQ,aCsBJW,EAjBH,WAER,OACE,kBAAC,IAAD,KACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOE,OAAK,EAACmC,KAAK,IAAIC,UAAWnC,IACjC,kBAAC,IAAD,CAAOkC,KAAK,SAASC,UAAWZ,IAChC,kBAAC,IAAD,CAAOW,KAAK,WAAWC,UAAWC,IAClC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWN,QCNzBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCXNW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53c102d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react';\r\nimport { Link, NavLink, withRouter } from 'react-router-dom'\r\n\r\nconst Navbar = (props) => {\r\n  // console.log(props)\r\n  \r\n  // setTimeout(()=>{\r\n  //   props.history.push('/');\r\n  // },5000);\r\n  return (\r\n    <nav className=\"nav-wrapper red darken-3\">\r\n      <div className=\"container\">\r\n        <Link className=\"brand-logo\" to=\"/\">Poke' Times</Link>\r\n        <ul className=\"right\">\r\n          <li><NavLink exact to=\"/\">Home</NavLink></li>\r\n          <li><NavLink to='/about'>About</NavLink></li>\r\n          <li><NavLink to='/contact'>Contact</NavLink></li>\r\n        </ul>\r\n      </div>\r\n    </nav> \r\n  )\r\n}\r\n\r\nexport default withRouter(Navbar)\r\n\r\n//          Higher order component withRouter\r\n// following history.push method is available in Navbar component only because of higher\r\n  // order component ie withRouter. Otherwise it was only available in Route component\r\n  // if you see this Navbar component in App.js file Navbar is not in <Route tag","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom'\r\nimport Pokeball from '../pokeball.png'\r\nexport class Home extends Component {\r\n    \r\n    state = {\r\n        posts: []\r\n    }\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => {\r\n            // console.log(res);\r\n            this.setState({\r\n                posts : res.data.slice(0, 10)\r\n            });\r\n        })\r\n    }\r\n    render() {\r\n        const { posts } = this.state;\r\n        const postList = posts.length ? (\r\n            posts.map(post => {\r\n              return (\r\n                <div className=\"post card \" key={post.id}>\r\n                  <img src={Pokeball} alt=\"A Pokeball\" />\r\n                  <div className=\"card-content\">\r\n                  <Link to={'/' + post.id}>\r\n                    <span className=\"card-title red-text\">{post.title}</span>\r\n                    </Link>\r\n                    <p>{post.body}</p>\r\n                  </div>\r\n                </div>\r\n              )\r\n            })\r\n          ) : (\r\n            <div className=\"center\">No posts to show</div>\r\n          );\r\n      \r\n                return (\r\n      <div>\r\n        <div className=\"container home\">\r\n          <h4 className=\"center\">Home</h4>\r\n          {postList}\r\n        </div>\r\n      </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Home\r\n\r\n\r\n// axios is same as fetch. Have to install axios by npm install axios","import React from 'react'\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h4 className=\"center\">About</h4>\r\n        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Recusandae repudiandae repellat illo magni eligendi cupiditate voluptates eius nam voluptate. Incidunt nihil ullam quae quia officia quaerat, deserunt eligendi explicabo totam?</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About","import React from 'react'\r\nimport Rainbow from '../hoc/Rainbow'\r\n\r\nconst Contact = (props) => {\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h4 className=\"center\">Contact</h4>\r\n        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Recusandae repudiandae repellat illo magni eligendi cupiditate voluptates eius nam voluptate. Incidunt nihil ullam quae quia officia quaerat, deserunt eligendi explicabo totam?</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Rainbow(Contact)","import React from 'react'\r\n\r\nconst Rainbow = (WrappedComponent) => {\r\n\r\n  const colours = ['red', 'pink', 'orange', 'blue', 'green', 'yellow'];\r\n  const randomColour = colours[Math.floor(Math.random() * 6)];\r\n  const className = randomColour + '-text';\r\n\r\n  return (props) => (\r\n    <div className={className}>\r\n      <WrappedComponent {...props} />\r\n    </div>  \r\n  )\r\n  \r\n}\r\n\r\nexport default Rainbow","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nclass Post extends Component {\r\n  state = {\r\n    post: \"\"\r\n  }\r\n  componentDidMount(){\r\n    let id = this.props.match.params.post_id;\r\n    axios.get('https://jsonplaceholder.typicode.com/posts/' + id)\r\n      .then(res => {\r\n        this.setState({\r\n          post: res.data\r\n        });\r\n        //console.log(res.data);\r\n      });\r\n  }\r\n  render() {\r\n\r\n    const post = this.state.post ? (\r\n      <div className=\"post\">\r\n        <h4 className=\"center\">{this.state.post.title}</h4>\r\n        <p>{this.state.post.body}</p>\r\n      </div>\r\n    ) : (\r\n      <div className=\"center\">Loading post...</div>\r\n    );\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        {post}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Post","import React from 'react';\nimport Navbar from './components/Navbar'\nimport { Route, BrowserRouter, Switch } from 'react-router-dom'\nimport Home from './components/Home'\nimport About from './components/About'\nimport Contact from './components/Contact'\nimport Post from './components/Post';\n\nconst App = () => {\n  \n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/about' component={About} />\n          <Route path='/contact' component={Contact} />\n          <Route path='/:post_id' component={Post} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}